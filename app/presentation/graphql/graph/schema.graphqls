# スカラー型の定義
# "2025-02-02T12:00:00Z" のような形式
scalar DateTime

directive @isAuthenticated on FIELD_DEFINITION

# User型の定義
type User {
  id: String!
  lastName: String!
  firstName: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  groupIDs: [String!]!
  eventIDs: [String!]!
}

# Group型の定義
type Group {
  id: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userIDs: [String!]!
  eventIDs: [String!]!
}

# Event型の定義
type Event {
  id: String!
  userID: String!
  itemID: String!
  together: Boolean!
  description: String!
  year: Int!
  month: Int!
  day: Int!
  date: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  startDate: DateTime!
  endDate: DateTime!
  important: Boolean!
}

# Item型の定義
type Item {
  id: String!
  name: String!
  groupID: String!
}

# EventRulesの定義
type EventRules {
  userID: String!
  itemID: String!
  normalLimit: Int!
  importantLimit: Int!
}


# クエリの定義(データの取得のエンドポイント)
type Query {
  # ユーザー関連
  user(id: String): User! @isAuthenticated

  # グループ関連
  group(id: String!): Group! @isAuthenticated 
  groupsByUserID: [Group!]! @isAuthenticated

  # イベント関連
  event(id: String!): Event! @isAuthenticated
  eventsByMonth(input: MonthlyEventInput!,groupID: String!): [Event!]! @isAuthenticated
  eventsByDay(input: DailyEventInput!,groupID: String!): [Event!]! @isAuthenticated

  # アイテム関連
  item(id: String!): Item! @isAuthenticated
  itemsBygroupID(groupID: String!): [Item!]! @isAuthenticated
}






# 入力型の定義
input CreateUserInput {
  lastName: String!
  firstName: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  lastName: String
  firstName: String
}

input UpdateGroupInput {
  name: String
}

input CreateEventInput {
  itemID: String!
  together: Boolean!
  description: String!
  year: Int!
  month: Int!
  day: Int!
  important: Boolean!
}

input MonthlyEventInput {
  year: Int!
  month: Int!
}

input DailyEventInput {
  year: Int!
  month: Int!
  day: Int!
}

input CreateItemInput {
  name: String!
  groupID: String!
}

input UpsertEventRuleInput {
  userID: String!
  itemID: String!
  NormalLimit: Int!
  ImportantLimit: Int!
}

type AuthUserResponse {
  token: String!
  User:  User!
}





# ミューテーションの定義(データの作成、更新、削除のエンドポイント)
type Mutation {
  # ユーザー関連
  updateUser(input: UpdateUserInput!): User! @isAuthenticated
  deleteUser: Boolean! @isAuthenticated

  # グループ関連
  createGroup(name: String!): Group! @isAuthenticated
  updateGroup(id: String!, input: UpdateGroupInput!): Group! @isAuthenticated
  deleteGroup(id: String!): Boolean! @isAuthenticated
  removeUserFromGroup(groupID: String!, userID: String!): Group! @isAuthenticated

  # グループ招待
  """招待リンクを生成します"""
  generateGroupInviteLink(groupID: String!): String! @isAuthenticated

  """招待用のQRコードを生成します (Base64エンコードされた画像データ)"""
  generateGroupInviteQRCode(groupID: String!): String! @isAuthenticated

  """招待を承諾します"""
  acceptGroupInvitation(token: String!): Group! @isAuthenticated

  # イベント関連
  createEvent(input: CreateEventInput!, groupID: String!): Event! @isAuthenticated
  deleteEvent(id: String!): Boolean! @isAuthenticated

  # アイテム関連
  createItem(input: CreateItemInput!): Item! @isAuthenticated
  deleteItem(id: String!): Boolean! @isAuthenticated

  # イベントルール関連
  UpsertEventRule(input: UpsertEventRuleInput!): Boolean! @isAuthenticated

  # メール、認証関連
  sendVerificationCode(email: String!): Boolean!
  signup(input: CreateUserInput!, vcode: String!): AuthUserResponse!
  signin(email: String!, password: String!): AuthUserResponse!
}
