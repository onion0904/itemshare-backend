name: Deploy API to Proxmox VM

on:
  push:
    branches:
      - vm-deploy # vm-deployブランチへのプッシュでデプロイを開始

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: carshare-backend # GitHub環境設定（Secrets管理に便利）

    steps:
      # ========================================
      # 1. リポジトリのコードをチェックアウト
      # ========================================
      - name: Checkout Code
        uses: actions/checkout@v4

      # ========================================
      # 2. Docker Hubへログインしてイメージをビルド・プッシュ
      # ========================================
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfileが存在するディレクトリ
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}:latest

      # ========================================
      # 3. cloudflaredをインストール（Cloudflare Access経由のSSH接続に必要）
      # ========================================
      - name: Setup cloudflared
        run: |
          # cloudflaredの最新版をダウンロードしてインストール
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          
          # インストール確認
          cloudflared --version

      # ========================================
      # 4. Cloudflare Access認証の設定とテスト
      # ========================================
      - name: Setup Cloudflare Access Authentication
        run: |
          # 認証情報が設定されているか確認（値は表示しない）
          if [ -z "${{ secrets.CF_CLIENT_ID }}" ] || [ -z "${{ secrets.CF_CLIENT_SECRET }}" ]; then
            echo "❌ Error: CF_CLIENT_ID or CF_CLIENT_SECRET is not set"
            exit 1
          fi
          echo "✅ Cloudflare Access credentials are set"
          
          # SSH用のディレクトリを作成
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # 秘密鍵をファイルに保存
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # cloudflaredのラッパースクリプトを作成
          # このスクリプトが認証情報を環境変数として受け取る
          cat << 'SCRIPT_EOF' > ~/.ssh/cloudflared-wrapper.sh
          #!/bin/bash
          exec cloudflared access ssh --hostname "$1"
          SCRIPT_EOF
          chmod +x ~/.ssh/cloudflared-wrapper.sh
          
          # SSH設定ファイルを作成
          # ProxyCommandでラッパースクリプトを使用
          cat << EOF > ~/.ssh/config
          Host deploy-vm
            HostName ${{ secrets.DEPLOY_HOST }}
            User ${{ secrets.DEPLOY_USER }}
            IdentityFile ~/.ssh/id_rsa
            ProxyCommand ~/.ssh/cloudflared-wrapper.sh %h
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config
          
          echo "✅ SSH config created successfully"

      # ========================================
      # 5. SSH経由でProxmox VMにデプロイを実行
      # ========================================
      - name: Deploy to Proxmox VM via SSH
        env:
          # cloudflaredが環境変数から自動的に読み取る
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_CLIENT_SECRET }}
        run: |
          # 環境変数が設定されていることを確認
          echo "🔐 Authenticating via Cloudflare Access..."
          
          # SSH接続してデプロイコマンドを実行
          # -T: 疑似端末の割り当てを無効化（標準入力リダイレクトのため）
          ssh -T deploy-vm << 'EOF'
            set -e  # エラーが発生したら即座に終了
            
            echo "📂 Navigating to application directory..."
            cd /home/${{ secrets.DEPLOY_USER }}/main/itemshare-backend
            
            echo "📥 Pulling latest Docker image for api service..."
            /usr/bin/docker compose pull api
            
            echo "🔄 Restarting api service..."
            /usr/bin/docker compose up -d --no-deps api
            
            echo "🧹 Cleaning up unused Docker images..."
            /usr/bin/docker image prune -f
            
            echo "✅ Deployment completed successfully!"
          EOF
          
          echo "🎉 Deployment finished!"

      # ========================================
      # 6. デプロイ完了通知（オプション）
      # ========================================
      - name: Deployment Status
        if: success()
        run: |
          echo "✅ Deployment to Proxmox VM completed successfully!"
          echo "📦 Image: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}:latest"
          echo "🚀 Service: api"
