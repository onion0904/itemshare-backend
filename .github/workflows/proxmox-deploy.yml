name: Deploy to Proxmox VM

on:
  push:
    branches:
      - main # main ブランチにプッシュされたときに実行

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Docker イメージのビルドとプッシュ ---
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}:latest
          
      # --- SSH 経由でのデプロイ実行 (cross-join/ssh-actionを使用) ---
      - name: Deploy to Proxmox VM via SSH (Cloudflare Tunnel)
        uses: cross-join/ssh-action@v3
        with:
          # SSH接続先はTunnelのドメイン
          host: ${{ secrets.DEPLOY_HOST }} 
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          
          # 【重要】Cloudflare Access経由を強制するプロキシコマンド
          # 認証情報 (CF_CLIENT_ID/SECRET) を使ってトークンを取得し、SSHセッションを確立
          proxy_command: |
            cloudflared access ssh \
            --hostname ${{ secrets.DEPLOY_HOST }} \
            --client-id ${{ secrets.CF_CLIENT_ID }} \
            --client-secret ${{ secrets.CF_CLIENT_SECRET }}
            
          # 【重要】cloudflared コマンドがこのアクションの環境に必要なのでインストール
          pre_script: |
            sudo apt update && sudo apt install -y curl
            curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o /usr/local/bin/cloudflared
            sudo chmod +x /usr/local/bin/cloudflared

          # VM上で実行するデプロイコマンド
          script: |
            # 1. アプリケーションディレクトリに移動
            cd /home/${{ secrets.DEPLOY_USER }}/main/itemshare-backend
            
            # 2. 最新のDockerイメージをプル（apiサービスのみ）
            /usr/bin/docker compose pull api
            
            # 3. サービスを再起動
            /usr/bin/docker compose up -d --no-deps api
            
            # 4. 不要になった Docker イメージを削除
            /usr/bin/docker image prune -f
