name: Deploy API to Proxmox VM

on:
  push:
    branches:
      - vm-deploy # vm-deployブランチへのプッシュでデプロイを開始

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: carshare-backend # GitHub環境設定（Secrets管理に便利）

    steps:
      # ========================================
      # 1. リポジトリのコードをチェックアウト
      # ========================================
      - name: Checkout Code
        uses: actions/checkout@v4

      # ========================================
      # 2. Docker Hubへログインしてイメージをビルド・プッシュ
      # ========================================
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfileが存在するディレクトリ
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}:latest

      # ========================================
      # 3. cloudflaredをインストール（Cloudflare Access経由のSSH接続に必要）
      # ========================================
      - name: Setup cloudflared
        run: |
          # cloudflaredの最新版をダウンロードしてインストール
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          
          # インストール確認
          cloudflared --version

      # ========================================
      # 4. SSH設定ファイルを作成（Cloudflare Access経由の接続設定）
      # ========================================
      - name: Setup SSH config for Cloudflare Access
        run: |
          # SSH用のディレクトリを作成
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # 秘密鍵をファイルに保存
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # SSH設定ファイルを作成
          # ProxyCommandでcloudflaredを使用してCloudflare Access経由で接続
          cat << EOF > ~/.ssh/config
          Host deploy-vm
            HostName ${{ secrets.DEPLOY_HOST }}
            User ${{ secrets.DEPLOY_USER }}
            IdentityFile ~/.ssh/id_rsa
            ProxyCommand cloudflared access ssh --hostname %h --id ${{ secrets.CF_CLIENT_ID }} --secret ${{ secrets.CF_CLIENT_SECRET }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config
          
          # 設定内容を確認（デバッグ用、機密情報は表示されない）
          echo "SSH config created successfully"

      # ========================================
      # 5. SSH経由でProxmox VMにデプロイを実行
      # ========================================
      - name: Deploy to Proxmox VM via SSH
        run: |
          # SSH接続してデプロイコマンドを実行
          # deploy-vmは上記で設定したHost名
          ssh deploy-vm << 'EOF'
            # アプリケーションディレクトリに移動
            cd /home/${{ secrets.DEPLOY_USER }}/main/itemshare-backend
            
            # 最新のDockerイメージをプル（apiサービスのみ）
            /usr/bin/docker compose pull api
            
            # apiサービスのみを再起動（他のサービスには影響しない）
            /usr/bin/docker compose up -d --no-deps api
            
            # 使用されていない古いDockerイメージを削除してディスク容量を節約
            /usr/bin/docker image prune -f
            
            echo "Deployment completed successfully!"
          EOF

      # ========================================
      # 6. デプロイ完了通知（オプション）
      # ========================================
      - name: Deployment Status
        if: success()
        run: |
          echo "✅ Deployment to Proxmox VM completed successfully!"
          echo "📦 Image: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}:latest"
          echo "🚀 Service: api"